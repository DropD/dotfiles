set -o vi

## If not running interactively, don't do anything
#case $- in
#    *i*) ;;
#      *) return;;
#esac

## editor, prefer nvim / vimr if found on the path, fall back to vim / gvim
EDITOR=vim && [ -x $(command -v nvim) ] && EDITOR=nvim
VISUAL=gvim && [ -x $(command -v vimr) ] && VISUAL=vimr

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

## miniconda setup
if [ -d "${HOME}/miniconda3" ]; then
    export PATH=$PATH:~/miniconda3/bin
    has_conda=true
elif [ -d "${HOME}/miniconda" ]; then
    export PATH="$PATH":~/miniconda/bin
    has_conda=true
fi
has_conda=false && [ -x "$(command -v conda)" ] && has_conda=true
if [ $has_conda = true ]; then
    eval "$(register-python-argcomplete conda)"
fi

# virtualenvwrapper setup
has_venvwrap=false
for i in "/usr/local/bin/virtualenvwrapper.sh" "$HOME/.local/bin/virtualenvwrapper.sh"
do
    if [ -f $i ]; then
        has_venvwrap=true
        venvwrap=$i
    fi
done
if [ $has_venvwrap = true ]; then
    export WORKON_HOME=$HOME/.venvwrap
    export PROJECT_HOME=$HOME/EPFL
    . $venvwrap
fi

## bash completion (powerd by homebrew)
has_brew=false && [ -x "$(command -v brew)" ] && has_brew=true
if [ $has_brew = true ]; then
    #if [ -f $(brew --prefix)/etc/bash_completion ]; then
      . $(brew --prefix)/etc/bash_completion
    #fi
fi

## aliases
alias_dir="${HOME}/.config/bash/alias"
if [ -d $alias_dir ]; then
    shopt -s nullglob
    for alias_file in ${alias_dir}/*.sh; do
        source $alias_file
    done
    shopt -u nullglob
fi

## local path additions
path_dir="${HOME}/.config/bash/path"
if [ -d $path_dir ]; then
    shopt -s nullglob
    for path_file in ${path_dir}/*.sh; do
	source $path_file
    done
    shopt -u nullglob
fi

## local bashrc
lbashrc="${HOME}/.config/bash/local_bashrc"
if [ -f $lbashrc ]; then
    source $lbashrc
fi

# enable fs colors
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

# set ipythondir
test -d "$HOME/.config/ipython" && export IPYTHONDIR=$HOME/.config/ipython
  
function prompt_command {
if [[ $PWD = */Prog* ]]; then
    #~ export WCOL="1;32"
    export WCOL="$(tput setaf 2)$(tput bold)"
elif [[ $PWD = */EPFL* ]]; then
    #~ export WCOL="0;32"
    export WCOL="$(tput setaf 2)"
elif [[ $PWD = /usr* ]]; then
    #~ export WCOL="1;31"
    export WCOL="$(tput setaf 1)$(tput bold)"
else
    #~ export WCOL="0;37"
    export WCOL="$(tput setaf 7)"
fi
if [[ $HOSTNAME = *monch* ]]; then
    #~ export HCOL="0;31"
    export HCOL="$(tput setaf 1)"
else 
    #~ export HCOL="0;34"
    export HCOL="$(tput setaf 4)"
fi
export UCOL="$(tput setaf 3)"
export NOCOL="$(tput op)"
}

## User bin preceeds all if exists
if [ -d "${HOME}/bin" ]; then
    export PATH=~/bin:"$PATH"
fi

export PROMPT_COMMAND=prompt_command
#~ export PS1="\[\e[\$(echo -n \$HCOL)m\]\h:\[\e[\$(echo -n \$WCOL)m\]\W \[\e[0;33m\]\u\[\e[0m\]\$ "
export PS1="$(echo -n $HCOL)\h:$(echo -n $WCOL)\W $(echo -n $UCOL)\u$(echo -n $NOCOL)$ "
